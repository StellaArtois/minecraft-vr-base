buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "0.1"
group= "com.minecraft-vr.base"
archivesBaseName = "minecraft-vr_base"

minecraft {
    version = "1.7.2-10.12.2.1126"
    assetDir = "run/assets"
}

project.ext {
	optifineVersion           = '1.7.2_HD_U_D1'
	jRiftVersion              = '0.3.1.1'
	jRiftLibraryVersion       = '0.3.1.1'
	jMumbleVersion            = '1.0'
	jMumbleLibraryVersion     = '1.1'
	sixenseJavaVersion        = '062612.1'
	sixenseJavaLibraryVersion = '062612.0'
}

repositories {
	maven {
		name = "minecraft-vr"
		url = "http://repo.minecraft-vr.com/"
	}
}

dependencies {
	// Optifine
	//compile 'optifine:OptiFine:' + project.ext.optifineVersion

	// JRift
	compile 'de.fruitfly.ovr:JRift:' + project.ext.jRiftVersion
	runtime 'de.fruitfly.ovr:JRiftLibrary:' + project.ext.jRiftLibraryVersion + ':natives-windows'
	runtime 'de.fruitfly.ovr:JRiftLibrary:' + project.ext.jRiftLibraryVersion + ':natives-linux'
	runtime 'de.fruitfly.ovr:JRiftLibrary:' + project.ext.jRiftLibraryVersion + ':natives-osx'
	
	// Sixense
	compile 'com.sixense:SixenseJava:' + project.ext.sixenseJavaVersion
	runtime 'com.sixense:SixenseJavaLibrary:' + project.ext.sixenseJavaLibraryVersion + ':natives-windows'
	runtime 'com.sixense:SixenseJavaLibrary:' + project.ext.sixenseJavaLibraryVersion + ':natives-linux'
	runtime 'com.sixense:SixenseJavaLibrary:' + project.ext.sixenseJavaLibraryVersion + ':natives-osx'
	
	// JMumble
	compile 'net.aib42.mumblelink:JMumble:' + project.ext.jMumbleVersion
	runtime 'net.aib42.mumblelink:JMumbleLibrary:' + project.ext.jMumbleLibraryVersion + ':natives-windows'
	runtime 'net.aib42.mumblelink:JMumbleLibrary:' + project.ext.jMumbleLibraryVersion + ':natives-linux'
	runtime 'net.aib42.mumblelink:JMumbleLibrary:' + project.ext.jMumbleLibraryVersion + ':natives-osx'
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Natives extraction - thanks to kiras, Szczepan Faber for their example
platforms = ['windows', 'linux', 'osx']
platforms.each { platform ->
    task "${platform}Natives" {
        outputDir = "$buildDir/natives"
        inputs.files(configurations.runtime)
        outputs.dir(outputDir)
        doLast {
            copy {
                def artifacts = configurations.runtime.resolvedConfiguration.resolvedArtifacts
                    .findAll { it.classifier == "natives-$platform" }
                artifacts.each { 
                    from zipTree(it.file)
                }            
                into outputDir
            }
        }
    }
}

task natives {
    description "Copies native libraries to an appropriate directory."
	logger.info('Finding/copying natives...')// for ' + Platform.getOperatingSystem().getDisplayName())
    dependsOn platforms.collect { "${it}Natives" }.findAll { tasks[it] }
}